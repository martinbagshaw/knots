import React from 'react';
import styled, { css } from 'styled-components';

import { Mask, Rope } from '../common/knotStyles';
import { colors } from '../../style/styleVariables';
import { darkenFunc } from '../../style/styleFunctions';

// Detailed Figure 8

// TODO / spec
// - handle logic through a context, etc
// - a parent component handles state, based on step number
// - write / draw a timeline of events
// - think about transforms and strokes (if we zoom, stroke will be larger)


// THIS SVG:
// - will require masks initially, then they must be removed
// - this will require gradient(s) that stop and start
// - front layer lighter than back layers
// - will become a clusterfuck - at least when making in figma. Everything needs to morph together


// METHOD:
// - create all paths in one grouped select
// - copy all in one go for correct sizing and alignment



// tight fig8:
// - path test

{/* <svg width="291" height="780" viewBox="0 0 291 780" fill="none" xmlns="http://www.w3.org/2000/svg">
<path
d="M175.189 0C175.189 0 175.189 276.683 175.189 315.202C175.189 353.72 166.957 373.527 143.685 395.808C120.413 418.09 96.6454 434.43 81.2957 451.266C65.9459 468.101 50.5962 484.441 50.5962 523.558C50.5962 567.627 75.9758 604.763 131.617 604.763C180.326 604.763 213.006 576.044 213.006 543.364C213.006 505.237 182.307 495.334 162.501 481.47C144.671 468.989 136.07 463.731 125.5 452.33"
stroke="#49B4F1" stroke-width="40" stroke-miterlimit="10"/>

<path d="M179.581 457C190.598 441.761 197.276 435.298 210.035 424.362C223.899 412.478 236.442 398.284 238.753 372.866C241.065 347.448 227.86 315.594 172.155 305.443C116.451 295.293 73.0415 323.683 73.0415 364.285C73.0415 380.106 77.5511 392.384 86 404.877" stroke="#49B4F1" stroke-width="40" stroke-miterlimit="10"/>

<path d="M147 509.106C144.874 511.989 141.969 515.843 139.063 519.431C115.956 550.461 123.217 566.283 123.217 610.429C123.217 610.429 123.223 637.5 123.223 679.5C123.223 721.5 140.5 759.25 185 759.25C229.5 759.25 269 711.5 248.5 679.5C228 647.5 159.5 647.971 159.5 610.429C159.5 610.429 159.5 596 159.5 567C159.5 538 187 495 212 467.5C237 440 271 421.5 271 369C271 327 242 274 153 274C64.0002 274 42.806 321.5 42.806 369C42.806 399 69.5002 446 139.063 463C208.626 480 245.5 501 245.5 546.5C245.5 592 203.126 635 139.063 635C57.0001 635 20.2957 582.5 20.2957 525C20.2957 447 78.5001 412.5 106.5 388.5C134.5 364.5 139.063 347.5 140 323.5V129C140 108.5 151.864 93.4999 174.5 93.4999C191.5 93.4999 198.5 106.5 198.5 117.5C198.5 165 163.5 177.5 140 177.5C129.513 177.5 117.354 175.025 115.566 168C114.2 162.632 118.888 154.608 135 143C144.5 136.5 157.5 129 174.5 129C191.5 129 198.5 142 198.5 153C198.5 200.5 163.5 213 140 213C116.5 213 116.329 204.701 116.329 204.701C114.963 199.334 119.651 191.309 135.763 179.701C145.263 173.201 158.263 165.701 175.263 165.701C185.738 165.701 192.417 170.637 196 177C198.232 180.963 199.263 185.479 199.263 189.701C199.263 237.201 182 249.701 166.5 249.701C161 249.701 153.5 244 153.5 236C153.5 231.2 153.5 78.1667 153.5 0" stroke="#49B4F1" stroke-width="40" stroke-miterlimit="10"/>
</svg> */}






const pathOne = "M175.189 0C175.189 0 175.189 276.683 175.189 315.202C175.189 353.72 166.957 373.527 143.685 395.808C120.413 418.09 96.6454 434.43 81.2957 451.266C65.9459 468.101 50.5962 484.441 50.5962 523.558C50.5962 567.627 75.9758 604.763 131.617 604.763C180.326 604.763 213.006 576.044 213.006 543.364C213.006 505.237 182.307 495.334 162.501 481.47C144.671 468.989 136.07 463.731 125.5 452.33";
// const pathOneHover = ";

const pathTwo = "M179.581 457C190.598 441.761 197.276 435.298 210.035 424.362C223.899 412.478 236.442 398.284 238.753 372.866C241.065 347.448 227.86 315.594 172.155 305.443C116.451 295.293 73.0415 323.683 73.0415 364.285C73.0415 380.106 77.5511 392.384 86 404.877"
// const pathTwoHover = "";

const pathThree = "M147 509.106C144.874 511.989 141.969 515.843 139.063 519.431C115.956 550.461 123.217 566.283 123.217 610.429C123.217 610.429 123.223 637.5 123.223 679.5C123.223 721.5 140.5 759.25 185 759.25C229.5 759.25 269 711.5 248.5 679.5C228 647.5 159.5 647.971 159.5 610.429C159.5 610.429 159.5 596 159.5 567C159.5 538 187 495 212 467.5C237 440 271 421.5 271 369C271 327 242 274 153 274C64.0002 274 42.806 321.5 42.806 369C42.806 399 69.5002 446 139.063 463C208.626 480 245.5 501 245.5 546.5C245.5 592 203.126 635 139.063 635C57.0001 635 20.2957 582.5 20.2957 525C20.2957 447 78.5001 412.5 106.5 388.5C134.5 364.5 139.063 347.5 140 323.5V129C140 108.5 151.864 93.4999 174.5 93.4999C191.5 93.4999 198.5 106.5 198.5 117.5C198.5 165 163.5 177.5 140 177.5C129.513 177.5 117.354 175.025 115.566 168C114.2 162.632 118.888 154.608 135 143C144.5 136.5 157.5 129 174.5 129C191.5 129 198.5 142 198.5 153C198.5 200.5 163.5 213 140 213C116.5 213 116.329 204.701 116.329 204.701C114.963 199.334 119.651 191.309 135.763 179.701C145.263 173.201 158.263 165.701 175.263 165.701C185.738 165.701 192.417 170.637 196 177C198.232 180.963 199.263 185.479 199.263 189.701C199.263 237.201 182 249.701 166.5 249.701C161 249.701 153.5 244 153.5 236C153.5 231.2 153.5 78.1667 153.5 0";
// const pathThreeHover = "";

// const pathFour = "M 258.712 572.905 C 252.163 579.457 245.614 586.009 239.065 592.561 C 232.517 599.113 225.968 605.665 219.419 612.217 C 190.239 641.463 172.196 681.826 172.196 726.405 L 172.202 997.42";
// const pathFourHover = "M 230.521 509.516 C 230.521 509.516 224.855 517.516 219.188 524.516 C 195.855 555.849 204.196 571.826 204.196 616.404 C 204.197 679.907 204.198 743.409 204.199 806.912 L 204.202 997.419";

// const HoverFig8 = styled.svg`
//   pointer-events: none;
//   transition: 0.5s ease;
//   path {
//     transition: 0.5s ease;
//   }
// `;

const BlueRope = styled(Rope)`
  stroke: ${props => props.ishovered ?
    css`${darkenFunc(0.2, colors.blue)}` : 
    colors.blue};
`;

const DetailedFig8 = ({ width = 291, ishovered }) => {
  return (
    <svg
      version="1.1"
      xmlns="http://www.w3.org/2000/svg"
      xlink="http://www.w3.org/1999/xlink"
      // x="0px" y="0px"
      style={{
        width,
      }}
      viewBox="0 0 291 780"
      xmlSpace="preserve">

        <Mask d={pathOne}/>
        <BlueRope d={pathOne}/>

        <Mask d={pathTwo}/>
        <BlueRope d={pathTwo}/>

        <Mask d={pathThree}/>
        <BlueRope d={pathThree}/>

        {/* <Mask d={pathFour}/>
        <Rope d={pathFour}/> */}

    </svg>
  );
};

export default DetailedFig8;